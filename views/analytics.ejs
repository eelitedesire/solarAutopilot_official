<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <base href="<%= ingress_path %>">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">
    <title>Carbonoz SolarAutopilot</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="<%= ingress_path %>/css/bootstrap.min.css">
    <link rel="stylesheet" href="<%= ingress_path %>/css/custom.css">
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">

    <!-- Google Material Icon -->
    <link href="https://fonts.googleapis.com/css2?family=Material+Icons" rel="stylesheet">

    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- D3.js -->
    <script src="https://d3js.org/d3.v6.min.js"></script>

    <style>
    

        .table-container {
            margin: 0 auto;
            width: 80%;
        }

        table {
            border-collapse: collapse;
            width: 100%;
        }

        th, td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        tr:hover {
            background-color: #f5f5f5;
        }

        .chartMenu {
            width: 100%;
            height: 40px;
            background: #1A1A1A;
            color: #fff;
            margin-bottom: 10px;
        }

        .chartMenu p {
            padding: 10px;
            font-size: 20px;
        }

        .chartCard {
            width: 70vw;
            height: calc(100vh - 40px);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .chartBox {
            width: 850px;
            padding: 10px;
            border-radius: 20px;
            border: solid 30px rgba(54, 162, 235, 1);
            background: white;
            margin-bottom: 10px;
            margin-left: 200px;

        }
    </style>

<script>
    function generateCSV(tableId) {
        let csv = [];
        const rows = document.querySelectorAll(`#${tableId} tbody tr`);

        // Header row
        let headerRow = [];
        const headers = document.querySelectorAll(`#${tableId} thead th`);
        headers.forEach(header => {
            headerRow.push(header.textContent.trim());
        });
        csv.push(headerRow.join(','));

        // Data rows
        rows.forEach(row => {
            let rowData = [];
            const cells = row.querySelectorAll('td');
            cells.forEach(cell => {
                rowData.push(cell.textContent.trim());
            });
            csv.push(rowData.join(','));
        });

        // Create a Blob object with CSV data
        const blob = new Blob([csv.join('\n')], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);

        // Update download link
        const downloadLink = document.getElementById(`${tableId}-download`);
        downloadLink.href = url;
        downloadLink.download = `${tableId}-${new Date().toISOString()}.csv`;
    }

    setInterval(() => {
        generateCSV('last30days-table');
        generateCSV('last12months-table');
    }, 2000);

    function getTableData(tableId) {
        const rows = document.querySelectorAll(`#${tableId} tbody tr`);
        let labels = [];
        let solarData = [];
        let gridData = [];
        let loadData = [];

        rows.forEach(row => {
            const cells = row.querySelectorAll('td');
            labels.push(cells[0].textContent.trim());
            solarData.push(parseFloat(cells[1].textContent.trim()));
            gridData.push(parseFloat(cells[2].textContent.trim()));
            loadData.push(parseFloat(cells[3].textContent.trim()));
        });

        return { labels, solarData, gridData, loadData };
    }

    function updateChart(chartElementId, labels, datasets) {
        const ctx = document.getElementById(chartElementId).getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: datasets
            },
            options: {
                responsive: true,
                scales: {
                    x: { stacked: true },
                    y: {
                        stacked: true,
                        title: { display: true, text: 'kWh' }
                    }
                },
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: chartElementId.replace(/-/g, ' ') }
                }
            }
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        const last30DaysData = getTableData('last30days-table');
        updateChart('last-30-days-chart', last30DaysData.labels, [
            { label: 'Solar', data: last30DaysData.solarData, backgroundColor: '#FFA500' },
            { label: 'Grid', data: last30DaysData.gridData, backgroundColor: '#4CAF50' },
            { label: 'Load', data: last30DaysData.loadData, backgroundColor: '#FF5722' }
        ]);

        const last12MonthsData = getTableData('last12months-table');
        updateChart('last-12-months-chart', last12MonthsData.labels, [
            { label: 'Solar', data: last12MonthsData.solarData, backgroundColor: '#FFA500' },
            { label: 'Grid', data: last12MonthsData.gridData, backgroundColor: '#4CAF50' },
            { label: 'Load', data: last12MonthsData.loadData, backgroundColor: '#FF5722' }
        ]);

        function calculateSolarPVTotals(data) {
            let dailyTotal = 0;
            let weeklyTotal = 0;
            let monthlyTotal = 0;

            dailyTotal = data.solarData[0];
            for (let i = 0; i < 7; i++) {
                weeklyTotal += data.solarData[i];
            }
            for (let i = 0; i < 30; i++) {
                monthlyTotal += data.solarData[i];
            }

            return { dailyTotal, weeklyTotal, monthlyTotal };
        }

        const solarPVTotalsLast30Days = calculateSolarPVTotals(last30DaysData);
        document.getElementById('daily-solar-pv-total').textContent = `${solarPVTotalsLast30Days.dailyTotal.toFixed(1)} kWh`;
        document.getElementById('weekly-solar-pv-total').textContent = `${solarPVTotalsLast30Days.weeklyTotal.toFixed(1)} kWh`;
        document.getElementById('monthly-solar-pv-total').textContent = `${solarPVTotalsLast30Days.monthlyTotal.toFixed(1)} kWh`;
    });
    </script>

</head>
<body>
<div class="wrapper">
    <div class="body-overlay"></div>

    <!-------sidebar--design------------>
    <div id="sidebar">
        <div class="sidebar-header">
            <h3><img src="https://carbonoz.com/assets/images/image04.jpg?v=8b5d1d9b" class="img-fluid"/><span>Carbonoz </span></h3>
        </div>
        <ul class="list-unstyled component m-0">
            <li class="active">
                <a href="<%= ingress_path %>/" class="dashboard"><i class="material-icons">dashboard</i>Dashboard</a>
            </li>
            <li>
				<a href="<%= ingress_path %>/dashboard" class="charts"><i class="material-icons">battery_charging_full</i>Energy</a>
			</li>
            <li>
                <a href="<%= ingress_path %>/analytics" class="total-icon"><i class="material-icons">functions</i>Totals</a>
            </li>
            <li>
                <a href="<%= ingress_path %>/messages" class="message-icon"><i class="material-icons">message</i>Message</a>
            </li>
            <li>
                <a href="<%= ingress_path %>/charts" class="automation-icon"><i class="material-icons">bar_chart</i>Charts</a>
            </li>
            
            <li>
                <a href="<%= ingress_path %>/settings" class="config-icon"><i class="material-icons">settings</i>Settings</a>
            </li>
        </ul>
    </div>
    <!-------sidebar--design- close----------->

    <!-------page-content start----------->
    <div id="content">
        <!------top-navbar-start----------->
        <div class="top-navbar">
            <div class="xd-topbar">
                <div class="row">
                    <div class="col-2 col-md-1 col-lg-1 order-2 order-md-1 align-self-center">
                        <div class="xp-menubar">
                            <span class="material-icons text-white">signal_cellular_alt</span>
                        </div>
                    </div>
                    <div class="col-md-5 col-lg-3 order-3 order-md-2"></div>
                    <div class="col-10 col-md-6 col-lg-8 order-1 order-md-3">
                        <div class="xp-profilebar text-right">
                            <nav class="navbar p-0"></nav>
                        </div>
                    </div>
                </div>
                <div class="xp-breadcrumbbar text-center">
                    <h4 class="page-title">Dashboard</h4>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="#">Carbonoz</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Dashboard</li>
                    </ol>
                </div>
            </div>
        </div>
        <!------top-navbar-end----------->

        <!------main-content-start----------->
        <div class="main-content">
            <div class="container-fluid">
                
                <div class="row">
                    <div class="col-md-12">

                        <div class="container-xl">
                            <div class="row g-3">
                                <div class="col-md-4">
                                    <div class="card card-body bg-light">
                                        <h4 class="card-title">Today</h4>
                                        <div class="card-text">
                                            <h4>
                                                <img src="https://www.svgrepo.com/download/293503/solar-panel.svg" class="img-fluid" alt="Solar Panel" width="50"/>
                                                <span class="text-secondary">Solar PV Total:</span>
                                                <span id="daily-solar-pv-total">Calculating...</span>
                                            </h4>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="card card-body bg-light">
                                        <h4 class="card-title">Last 7 days</h4>
                                        <div class="card-text">
                                            <h4>
                                                <img src="https://www.svgrepo.com/download/293503/solar-panel.svg" class="img-fluid" alt="Solar Panel" width="50"/>
                                                <span class="text-secondary">Solar PV Total:</span>
                                                <span id="weekly-solar-pv-total">Calculating...</span>
                                            </h4>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="card card-body bg-light">
                                        <h4 class="card-title">Last 30 days</h4>
                                        <div class="card-text">
                                            <h4>
                                                <img src="https://www.svgrepo.com/download/293503/solar-panel.svg" class="img-fluid" alt="Solar Panel" width="50"/>
                                                <span class="text-secondary"> Solar PV Total:</span>
                                                <span id="monthly-solar-pv-total">Calculating...</span>
                                            </h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="chartMenu">
                            <p>Last 30 Days</p>
                        </div>
                        <div class="chartCard">
                            <div class="chartBox">
                                <canvas id="last-30-days-chart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-1">
                    <div class="col-md-12">
                        <div class="table-container">
                            <table id="last30days-table">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Solar PV</th>
                                        <th>Load</th> 
                                        <th>Battery Charged</th>
                                        <th>Battery Discharged</th>
                                        <th>Grid Used</th>
                                        <th>Grid Exported</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% for (let i = data.loadPowerData.length - 1; i >= 1 && i >= data.loadPowerData.length - 30; i--) { %>
                                        <tr>
                                            <!-- Display formatted date -->
                                            <td><%= new Date(data.loadPowerData[i].time).toLocaleDateString('en-GB', { timeZone: 'Indian/Mauritius' }) %></td>
                                            
                                            <% 
                                                let loadPowerDiff = 0, pvPowerDiff = 0, batteryStateOfChargeDiff = 0, batteryPowerDiff = 0, gridPowerDiff = 0, netPVPowerDiff = 0;
                                                
                                                // Ensure data exists and is valid before calculating differences
                                                if (data.loadPowerData[i-1] && data.loadPowerData[i] && data.loadPowerData[i-1].value !== null && data.loadPowerData[i].value !== null) {
                                                    loadPowerDiff = data.loadPowerData[i].value >= data.loadPowerData[i-1].value ? (data.loadPowerData[i].value - data.loadPowerData[i-1].value).toFixed(1) : data.loadPowerData[i].value.toFixed(1);
                                                }
                                                if (data.pvPowerData[i-1] && data.pvPowerData[i] && data.pvPowerData[i-1].value !== null && data.pvPowerData[i].value !== null) {
                                                    pvPowerDiff = data.pvPowerData[i].value >= data.pvPowerData[i-1].value ? (data.pvPowerData[i].value - data.pvPowerData[i-1].value).toFixed(1) : data.pvPowerData[i].value.toFixed(1);
                                                }
                                                if (data.batteryStateOfChargeData[i-1] && data.batteryStateOfChargeData[i] && data.batteryStateOfChargeData[i-1].value !== null && data.batteryStateOfChargeData[i].value !== null) {
                                                    batteryStateOfChargeDiff = data.batteryStateOfChargeData[i].value >= data.batteryStateOfChargeData[i-1].value ? (data.batteryStateOfChargeData[i].value - data.batteryStateOfChargeData[i-1].value).toFixed(1) : data.batteryStateOfChargeData[i].value.toFixed(1);
                                                }
                                                if (data.batteryPowerData[i-1] && data.batteryPowerData[i] && data.batteryPowerData[i-1].value !== null && data.batteryPowerData[i].value !== null) {
                                                    batteryPowerDiff = data.batteryPowerData[i].value >= data.batteryPowerData[i-1].value ? (data.batteryPowerData[i].value - data.batteryPowerData[i-1].value).toFixed(1) : data.batteryPowerData[i].value.toFixed(1);
                                                }
                                                if (data.gridPowerData[i-1] && data.gridPowerData[i] && data.gridPowerData[i-1].value !== null && data.gridPowerData[i].value !== null) {
                                                    gridPowerDiff = data.gridPowerData[i].value >= data.gridPowerData[i-1].value ? (data.gridPowerData[i].value - data.gridPowerData[i-1].value).toFixed(1) : data.gridPowerData[i].value.toFixed(1);
                                                }
                                                if (data.gridVoltageData[i-1] && data.gridVoltageData[i] && data.gridVoltageData[i-1].value !== null && data.gridVoltageData[i].value !== null) {
                                                    netPVPowerDiff = data.gridVoltageData[i].value >= data.gridVoltageData[i-1].value ? (data.gridVoltageData[i].value - data.gridVoltageData[i-1].value).toFixed(1) : data.gridVoltageData[i].value.toFixed(1);
                                                }
                                            %> 
                                            <td><%= pvPowerDiff %> kWh</td>
                                            <td><%= loadPowerDiff %> kWh</td>
                                            <td><%= batteryStateOfChargeDiff %> kWh</td>
                                            <td><%= batteryPowerDiff %> kWh</td>
                                            <td><%= gridPowerDiff %> kWh</td>
                                            <td><%= netPVPowerDiff %> kWh</td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                            <a id="last30days-table-download" class="btn btn-dark mt-3">Download CSV</a>
                        </div>
                    </div>
                </div>
                <div class="row mt-1">
                    <div class="col-md-12">
                        <div class="chartMenu">
                            <p>Last 12 Months</p>
                        </div>
                        <div class="chartCard">
                            <div class="chartBox">
                                <canvas id="last-12-months-chart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-1">
                    <div class="col-md-12">
                        <div class="table-container">
                            <table id="last12months-table">
                                <thead>
                                    <tr>
                                        <th>Month</th>
                                        <th>Solar PV</th>
                                        <th>Load</th>
                                        <th>Battery Charged</th>
                                        <th>Battery Discharged</th>
                                        <th>Grid Used</th>
                                        <th>Grid Exported</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% 
                                    let monthlyData = {};
                                    let today = new Date();
                                    
                                    // Initialize the last 12 months
                                    for (let i = 0; i < 12; i++) {
                                        let date = new Date(today.getFullYear(), today.getMonth() - i, 1);
                                        let monthKey = date.toLocaleString('default', { month: 'long', year: 'numeric' });
                                        monthlyData[monthKey] = {
                                            load: 0, solar: 0, batteryCharged: 0, 
                                            batteryDischarged: 0, gridUsed: 0, gridExported: 0
                                        };
                                    }
                        
                                    // Sum up the data for each month using the same formula as in the 30-day table
                                    for (let i = data.loadPowerData.length - 1; i >= 1 && i >= data.loadPowerData.length - 30; i--) {
                                        let date = new Date(data.loadPowerData[i].time);
                                        let monthKey = date.toLocaleString('default', { month: 'long', year: 'numeric' });
                                        
                                        if (monthlyData[monthKey]) {
                                            let loadPowerDiff, pvPowerDiff, batteryStateOfChargeDiff, batteryPowerDiff, gridPowerDiff, netPVPowerDiff;
                                            
                                            if (data.loadPowerData[i-1].value === null || data.loadPowerData[i-1].value === 0) {
                                                loadPowerDiff = 0;
                                                pvPowerDiff = 0;
                                                batteryStateOfChargeDiff = 0;
                                                batteryPowerDiff = 0;
                                                gridPowerDiff = 0;
                                                netPVPowerDiff = 0;
                                            } else {
                                                loadPowerDiff = data.loadPowerData[i].value >= data.loadPowerData[i-1].value ? 
                                                    (data.loadPowerData[i].value - data.loadPowerData[i-1].value) : data.loadPowerData[i].value;
                                                pvPowerDiff = data.pvPowerData[i].value >= data.pvPowerData[i-1].value ? 
                                                    (data.pvPowerData[i].value - data.pvPowerData[i-1].value) : data.pvPowerData[i].value;
                                                batteryStateOfChargeDiff = data.batteryStateOfChargeData[i].value >= data.batteryStateOfChargeData[i-1].value ? 
                                                    (data.batteryStateOfChargeData[i].value - data.batteryStateOfChargeData[i-1].value) : data.batteryStateOfChargeData[i].value;
                                                batteryPowerDiff = data.batteryPowerData[i].value >= data.batteryPowerData[i-1].value ? 
                                                    (data.batteryPowerData[i].value - data.batteryPowerData[i-1].value) : data.batteryPowerData[i].value;
                                                gridPowerDiff = data.gridPowerData[i].value >= data.gridPowerData[i-1].value ? 
                                                    (data.gridPowerData[i].value - data.gridPowerData[i-1].value) : data.gridPowerData[i].value;
                                                netPVPowerDiff = data.gridVoltageData[i].value >= data.gridVoltageData[i-1].value ? 
                                                    (data.gridVoltageData[i].value - data.gridVoltageData[i-1].value) : data.gridVoltageData[i].value;
                                            }
                        
                                            monthlyData[monthKey].load += loadPowerDiff;
                                            monthlyData[monthKey].solar += pvPowerDiff;
                                            monthlyData[monthKey].batteryCharged += batteryStateOfChargeDiff;
                                            monthlyData[monthKey].batteryDischarged += batteryPowerDiff;
                                            monthlyData[monthKey].gridUsed += gridPowerDiff;
                                            monthlyData[monthKey].gridExported += netPVPowerDiff;
                                        }
                                    }
                        
                                    // Display the data for each month
                                    Object.keys(monthlyData).forEach(month => {
                                        let data = monthlyData[month];
                                    %>
                                        <tr>
                                            <td><%= month %></td>
                                             <td><%= data.solar.toFixed(1) %> kWh</td>
                                             <td><%= data.load.toFixed(1) %> kWh</td>
                                            <td><%= data.batteryCharged.toFixed(1) %> kWh</td>
                                            <td><%= data.batteryDischarged.toFixed(1) %> kWh</td>
                                            <td><%= data.gridUsed.toFixed(1) %> kWh</td>
                                            <td><%= data.gridExported.toFixed(1) %> kWh</td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                            <a id="last12months-table-download" class="btn btn-dark mt-3">Download CSV</a>
                          
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!------main-content-end----------->
    </div>
    <!-------page-content end----------->
</div>

<script src="<%= ingress_path %>/js/jquery-3.3.1.slim.min.js"></script>
<script src="<%= ingress_path %>/js/popper.min.js"></script>
<script src="<%= ingress_path %>/js/bootstrap.min.js"></script>
<script src="<%= ingress_path %>/js/jquery-3.3.1.min.js"></script>
<script type="text/javascript">
    $(document).ready(function(){
       $(".xp-menubar").on('click',function(){
         $("#sidebar").toggleClass('active');
         $("#content").toggleClass('active');
       });
       
       $('.xp-menubar,.body-overlay').on('click',function(){
          $("#sidebar,.body-overlay").toggleClass('show-nav');
       });
       
    });
</script>
</body>
</html>
