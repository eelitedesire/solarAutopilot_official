<!DOCTYPE html>
<html>
  <head> 
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Solar Autopilot </title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="vendor/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="vendor/font-awesome/css/font-awesome.min.css">
    <!-- Custom Font Icons CSS-->
    <link rel="stylesheet" href="css/font.css">
    <!-- Google fonts - Muli-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Muli:300,400,700">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="css/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="css/custom.css">
    <!-- Favicon-->
    <link rel="shortcut icon" href="https://carbonoz.com/assets/images/image04.jpg?v=8b5d1d9b">
    <!-- Tweaks for older IEs--><!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->

        <style>
    
            .container {
                max-width: 800px;
                margin: auto;
                background: white;
                padding: 20px;
                border-radius: 5px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05), 0 4px 8px rgba(0, 0, 0, 0.05);
            }
            h1, h2 {
                color: #333;
            }
            form {
                margin-bottom: 20px;
            }
            label {
                display: block;
                margin-bottom: 5px;
            }
            input[type="text"], input[type="number"], select, textarea {
                width: 100%;
                padding: 8px;
                margin-bottom: 10px;
                border: 1px solid #ddd;
                border-radius: 4px;
            }
            button {
                background-color: #DEAF0B;
                color: #000;
                border: none;
                border-radius: 4px;
                cursor: pointer;
               
            }
            button:hover {
                background-color: #bd9609;
            }
            table {
                width: 100%;
                border-collapse: collapse;
            }
            th, td {
                padding: 10px;
                border: 1px solid #ddd;
                text-align: left;
            }
            th {
                background-color: #f2f2f2;
            }
            .modal {
                display: none;
                position: fixed;
                z-index: 1;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                overflow: auto;
                background-color: rgba(0,0,0,0.4);
            }
            .modal-content {
                background-color: #fefefe;
                margin: 15% auto;
                padding: 20px;
                border: 1px solid #888;
                width: 80%;
            }
            .close {
                color: #aaa;
                float: right;
                font-size: 28px;
                font-weight: bold;
            }
            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }
            #automation-log {
                margin-top: 20px;
                padding: 10px;
                background-color: #f0f0f0;
                border: 1px solid #ddd;
                max-height: 200px;
                overflow-y: auto;
            }

    
        </style>
        
  </head>
  <body>
    <header class="header">   
      <nav class="navbar navbar-expand-lg">
        <div class="search-panel">
          <div class="search-inner d-flex align-items-center justify-content-center">
            <div class="close-btn">Close <i class="fa fa-close"></i></div>
            <form id="searchForm" action="#">
              <div class="form-group">
                <input type="search" name="search" placeholder="What are you searching for...">
                <button type="submit" class="submit">Search</button>
              </div>
            </form>
          </div>
        </div>
        <div class="container-fluid d-flex align-items-center justify-content-between">
          <div class="navbar-header">
            <!-- Navbar Header--><a href="<%= ingress_path %>/" class="navbar-brand">
              <div class="brand-text brand-big visible text-uppercase"><img src="https://carbonoz.com/assets/images/image04.jpg?v=8b5d1d9b" alt="" width="40px"style="margin-right: 10px;"><strong class="text-primary">Solar</strong><strong>Autopilot</strong></div>
              <div class="brand-text brand-sm"><img src="https://carbonoz.com/assets/images/image04.jpg?v=8b5d1d9b" alt="" width="40px"style="margin-right: 10px;"><strong class="text-primary">S</strong><strong>A</strong></div></a>
            <!-- Sidebar Toggle Btn-->
            <button class="sidebar-toggle"><i class="fa fa-long-arrow-left"></i></button>
          </div>
         
        </div>
      </nav>
    </header>
    <div class="d-flex align-items-stretch">
      <!-- Sidebar Navigation-->
      <nav id="sidebar">
        <!-- Sidebar Header-->
        <div class="sidebar-header d-flex align-items-center">

          
        </div>
        <!-- Sidebar Navidation Menus--><span class="heading">Main</span>
        <ul class="list-unstyled">
            <li class="active"><a href="<%= ingress_path %>/"><i class="fa fa-home"></i> Home</a></li>
  
            <li><a href="<%= ingress_path %>/dashboard"><i class="fa fa-bolt"></i> Energy</a></li>
            <li><a href="<%= ingress_path %>/analytics"><i class="fa fa-calculator"></i> Totals</a></li>
  
         
                <li><a href="<%= ingress_path %>/messages"><i class="fa fa-envelope"></i> Messages</a></li>
  
                <li><a href="<%= ingress_path %>/settings"><i class="fa fa-cog"></i> Settings</a></li>

  
  
        </ul>
      </nav>
      <!-- Sidebar Navigation end-->
      <div class="page-content">
        <div class="page-header">
          <div class="container-fluid">
            <h2 class="h5 no-margin-bottom">Settings</h2>
          </div>
        </div>
    
        
       
    
       
        <section>
            <div class="container">
                <div id="system-state"></div>
        
                <h2>Universal Settings</h2>
                <form id="universal-settings-form">
                    <label for="maxBatteryDischargePower">Max Battery Discharge Power:</label>
                    <input type="number" id="maxBatteryDischargePower" name="maxBatteryDischargePower" required>
                    
                    <label for="gridChargeOn">Grid Charge:</label>
                    <input type="checkbox" id="gridChargeOn" name="gridChargeOn">
                    
                    <label for="generatorChargeOn">Generator Charge:</label>
                    <input type="checkbox" id="generatorChargeOn" name="generatorChargeOn">
                    
                    <label for="dischargeVoltage">Discharge Voltage:</label>
                    <input type="number" id="dischargeVoltage" name="dischargeVoltage" step="0.1" required>
                    
                    <button type="submit">Update Universal Settings</button>
                </form>
        
                <h2>Inverter Settings</h2>
                <button id="add-inverter-btn">Add New Inverter Type</button>
                <form id="inverter-settings-form">
                    <label for="inverter-type">Inverter Type:</label>
                    <select id="inverter-type" name="type"></select>
                    
                    <div id="inverter-specific-settings">
                        <label for="workMode">Work Mode:</label>
                        <select id="workMode" name="workMode"></select>
                        
                        <label for="solarExportWhenBatteryFull">Solar Export When Battery Full:</label>
                        <input type="checkbox" id="solarExportWhenBatteryFull" name="solarExportWhenBatteryFull">
                        
                        <label for="energyPattern">Energy Pattern:</label>
                        <select id="energyPattern" name="energyPattern"></select>
                        
                        <label for="maxSellPower">Max Sell Power:</label>
                        <input type="number" id="maxSellPower" name="maxSellPower">
                    </div>
                    
                    <button type="submit" class="update">Update Inverter Settings</button>
                    <button type="button" id="delete-inverter-btn">Delete Inverter Type</button>
                </form>
        
                <h2>Automation Rules</h2>
                <button id="add-rule-btn">Add New Rule</button>
                <br>
                <br>
                <table id="automation-rules-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Conditions</th>
                            <th>Actions</th>
                            <th>Days</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
        
                <h2>Scheduled Settings</h2>
                <button id="add-scheduled-setting-btn">Add New Scheduled Setting</button>
                <br>
        <br>
                <table id="scheduled-settings-table">
                    <thead>
                        <tr>
                            <th>Key</th>
                            <th>Value</th>
                            <th>Day</th>
                            <th>Hour</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
        
                <h2>Automation Log</h2>
                <div id="automation-log"></div>
            </div>
        
            <div id="rule-modal" class="modal">
                <div class="modal-content">
                    <span class="close">&times;</span>
                    <h2>Edit Rule</h2>
                    <form id="rule-form">
                        <label for="rule-name">Name:</label>
                        <input type="text" id="rule-name" required>
        
                        <label for="rule-conditions">Conditions (JSON):</label>
                        <textarea id="rule-conditions" required></textarea>
        
                        <label for="rule-actions">Actions (JSON):</label>
                        <textarea id="rule-actions" required></textarea>
        
                        <label for="rule-days">Days (comma-separated):</label>
                        <input type="text" id="rule-days" required>
        
                        <button type="submit">Save Rule</button>
                    </form>
                </div>
            </div>
        </section>
        <footer class="footer">
          <div class="footer__block block no-margin-bottom">
            <div class="container-fluid text-center">
              <!-- Please do not remove the backlink to us unless you support us at https://bootstrapious.com/donate. It is part of the license conditions. Thank you for understanding :)-->
               <p class="no-margin-bottom">2024 &copy; Carbonoz</p>
            </div>
          </div>
        </footer>
      </div>
    </div>
    <!-- JavaScript files-->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/popper.js/umd/popper.min.js"> </script>
    <script src="vendor/bootstrap/js/bootstrap.min.js"></script>
    <script src="vendor/jquery.cookie/jquery.cookie.js"> </script>
    <script src="vendor/chart.js/Chart.min.js"></script>
    <script src="vendor/jquery-validation/jquery.validate.min.js"></script>
    <script src="js/charts-home.js"></script>
    <script src="js/front.js"></script>
   
    <script>
        // Utility functions
        async function fetchAPI(url, method = 'GET', body = null) {
            const options = {
                method,
                headers: {
                    'Content-Type': 'application/json',
                },
            };
            if (body) {
                options.body = JSON.stringify(body);
            }
            const response = await fetch(url, options);
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
            }
            return response.json();
        }

        // Load and display universal settings
        async function loadUniversalSettings() {
            const settings = await fetchAPI('/api/universal-settings');
            Object.entries(settings).forEach(([key, value]) => {
                const element = document.getElementById(key);
                if (element) {
                    if (element.type === 'checkbox') {
                        element.checked = value;
                    } else {
                        element.value = value;
                    }
                }
            });
        }

        // Load inverter types and settings
        async function loadInverterSettings() {
            const types = await fetchAPI('/api/inverter-types');
            const selectElement = document.getElementById('inverter-type');
            selectElement.innerHTML = types.map(type => `<option value="${type}">${type}</option>`).join('');
            
            const { type, settings } = await fetchAPI('/api/inverter-settings');
            selectElement.value = type;
            
            const workModeSelect = document.getElementById('workMode');
            workModeSelect.innerHTML = settings.workMode.map(mode => `<option value="${mode}">${mode}</option>`).join('');
            
            const energyPatternSelect = document.getElementById('energyPattern');
            energyPatternSelect.innerHTML = settings.energyPattern.map(pattern => `<option value="${pattern}">${pattern}</option>`).join('');
            
            document.getElementById('solarExportWhenBatteryFull').checked = settings.solarExportWhenBatteryFull;
            document.getElementById('maxSellPower').value = settings.maxSellPower;
        }

        // Load and display automation rules
        async function loadAutomationRules() {
            const rules = await fetchAPI('/api/automation-rules');
            const tableBody = document.querySelector('#automation-rules-table tbody');
            tableBody.innerHTML = rules.map(rule => `
                <tr>
                    <td>${rule.name}</td>
                    <td>${JSON.stringify(rule.conditions)}</td>
                    <td>${JSON.stringify(rule.actions)}</td>
                    <td>${rule.days.join(', ')}</td>
                    <td>
                        <button onclick="editRule('${rule.id}')">Edit</button>
                        <button onclick="deleteRule('${rule.id}')">Delete</button>
                    </td>
                </tr>
            `).join('');
        }

        // Load and display scheduled settings
        async function loadScheduledSettings() {
            const settings = await fetchAPI('/api/scheduled-settings');
            const tableBody = document.querySelector('#scheduled-settings-table tbody');
            tableBody.innerHTML = settings.map(setting => `
                <tr>
                    <td>${setting.key}</td>
                    <td>${setting.value}</td>
                    <td>${setting.day}</td>
                    <td>${setting.hour}</td>
                    <td>
                        <button onclick="editScheduledSetting('${setting.id}')">Edit</button>
                        <button onclick="deleteScheduledSetting('${setting.id}')">Delete</button>
                    </td>
                </tr>
            `).join('');
        }

        // Event listeners
        document.getElementById('universal-settings-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const settings = Object.fromEntries(formData.entries());
            settings.gridChargeOn = formData.get('gridChargeOn') === 'on';
            settings.generatorChargeOn = formData.get('generatorChargeOn') === 'on';
            try {
                await fetchAPI('/api/universal-settings', 'POST', settings);
                alert('Universal settings updated successfully');
                // Send MQTT messages
                Object.entries(settings).forEach(([key, value]) => {
                    sendMQTTMessage(`universal/${key}`, value);
                });
            } catch (error) {
                alert('Failed to update universal settings: ' + error.message);
            }
        });

        document.getElementById('inverter-settings-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const type = document.getElementById('inverter-type').value;
            const settings = {
                workMode: document.getElementById('workMode').value,
                solarExportWhenBatteryFull: document.getElementById('solarExportWhenBatteryFull').checked,
                energyPattern: document.getElementById('energyPattern').value,
                maxSellPower: parseInt(document.getElementById('maxSellPower').value)
            };
            try {
                await fetchAPI('/api/inverter-settings', 'POST', { type, settings });
                alert('Inverter settings updated successfully');
                // Send MQTT messages
                Object.entries(settings).forEach(([key, value]) => {
                    sendMQTTMessage(`inverter/${key}`, value);
                });
            } catch (error) {
                alert('Failed to update inverter settings: ' + error.message);
            }
        });

        document.getElementById('add-inverter-btn').addEventListener('click', async () => {
            const newType = prompt('Enter new inverter type:');
            if (newType) {
                try {
                    await fetchAPI('/api/inverter-types', 'POST', { type: newType, settings: {} });
                    alert('New inverter type added: ' + newType);
                    loadInverterSettings();
                } catch (error) {
                    alert('Failed to add new inverter type: ' + error.message);
                }
            }
        });

        document.getElementById('delete-inverter-btn').addEventListener('click', async () => {
            const type = document.getElementById('inverter-type').value;
            if (confirm(`Are you sure you want to delete the inverter type: ${type}?`)) {
                try {
                    await fetchAPI(`/api/inverter-types/${type}`, 'DELETE');
                    alert('Inverter type deleted successfully');
                    loadInverterSettings();
                } catch (error) {
                    alert('Failed to delete inverter type: ' + error.message);
                }
            }
        });

        // Rule modal functionality
        const ruleModal = document.getElementById('rule-modal');
        const closeBtn = ruleModal.querySelector('.close');
        let currentRuleId = null;

        closeBtn.onclick = () => {
            ruleModal.style.display = 'none';
        };

        window.onclick = (event) => {
            if (event.target == ruleModal) {
                ruleModal.style.display = 'none';
            }
        };

        document.getElementById('add-rule-btn').addEventListener('click', () => {
            currentRuleId = null;
            document.getElementById('rule-name').value = '';
            document.getElementById('rule-conditions').value = '[]';
            document.getElementById('rule-actions').value = '[]';
            document.getElementById('rule-days').value = 'Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday';
            ruleModal.style.display = 'block';
        });

        document.getElementById('rule-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const rule = {
                name: document.getElementById('rule-name').value,
                conditions: JSON.parse(document.getElementById('rule-conditions').value),
                actions: JSON.parse(document.getElementById('rule-actions').value),
                days: document.getElementById('rule-days').value.split(',').map(day => day.trim())
            };

            try {
                if (currentRuleId) {
                    await fetchAPI(`/api/automation-rules/${currentRuleId}`, 'PUT', rule);
                } else {
                    await fetchAPI('/api/automation-rules', 'POST', rule);
                }
                ruleModal.style.display = 'none';
                loadAutomationRules();
            } catch (error) {
                alert('Failed to save rule: ' + error.message);
            }
        });

        async function editRule(id) {
            currentRuleId = id;
            try {
                const rule = await fetchAPI(`/api/automation-rules/${id}`);
                document.getElementById('rule-name').value = rule.name;
                document.getElementById('rule-conditions').value = JSON.stringify(rule.conditions, null, 2);
                document.getElementById('rule-actions').value = JSON.stringify(rule.actions, null, 2);
                document.getElementById('rule-days').value = rule.days.join(',');
                ruleModal.style.display = 'block';
            } catch (error) {
                alert('Failed to load rule for editing: ' + error.message);
            }
        }

        async function deleteRule(id) {
            if (confirm('Are you sure you want to delete this rule?')) {
                try {
                    await fetchAPI(`/api/automation-rules/${id}`, 'DELETE');
                    loadAutomationRules();
                } catch (error) {
                    alert('Failed to delete rule: ' + error.message);
                }
            }
        }

        document.getElementById('add-scheduled-setting-btn').addEventListener('click', () => {
            editScheduledSetting();
        });

        async function editScheduledSetting(id = null) {
            let setting = id ? await fetchAPI(`/api/scheduled-settings/${id}`) : {};
            const key = prompt('Enter setting key:', setting.key || '');
            const value = prompt('Enter setting value:', setting.value || '');
            const day = prompt('Enter day of week:', setting.day || '');
            const hour = prompt('Enter hour (0-23):', setting.hour || '');

            if (key && value && day && hour) {
                const updatedSetting = { key, value, day, hour: parseInt(hour) };
                try {
                    if (id) {
                        await fetchAPI(`/api/scheduled-settings/${id}`, 'PUT', updatedSetting);
                    } else {
                        await fetchAPI('/api/scheduled-settings', 'POST', updatedSetting);
                    }
                    loadScheduledSettings();
                } catch (error) {
                    alert('Failed to save scheduled setting: ' + error.message);
                }
            }
        }

        async function deleteScheduledSetting(id) {
            if (confirm('Are you sure you want to delete this scheduled setting?')) {
                try {
                    await fetchAPI(`/api/scheduled-settings/${id}`, 'DELETE');
                    loadScheduledSettings();
                } catch (error) {
                    alert('Failed to delete scheduled setting: ' + error.message);
                }
            }
        }

        function addToAutomationLog(message) {
            const logElement = document.getElementById('automation-log');
            const logEntry = document.createElement('p');
            logEntry.textContent = `${new Date().toLocaleString()}: ${message}`;
            logElement.prepend(logEntry);

            // Keep only the last 50 log entries
            while (logElement.children.length > 50) {
                logElement.removeChild(logElement.lastChild);
            }
        }

        async function sendMQTTMessage(topic, value) {
            try {
                await fetchAPI('/api/mqtt', 'POST', { topic: `solar_assistant_DEYE/${topic}`, message: value });
                addToAutomationLog(`Sent MQTT message: ${topic} = ${value}`);
            } catch (error) {
                console.error('Failed to send MQTT message:', error);
                addToAutomationLog(`Failed to send MQTT message: ${topic} = ${value}`);
            }
        }

        function updateSystemState(state) {
            const stateElement = document.getElementById('system-state');
            stateElement.innerHTML = `
                <p>Battery Power: ${state.batteryPower} W</p>
                <p>Battery SOC: ${state.batterySOC}%</p>
                <p>Solar Power: ${state.solarPower} W</p>
                <p>Grid Power: ${state.gridPower} W</p>
                <p>Load Power: ${state.loadPower} W</p>
                <p>Last Updated: ${new Date(state.time).toLocaleString()}</p>
            `;
        }

        function handleRealtimeUpdate(update) {
            if (update.type === 'automationRuleTriggered') {
                addToAutomationLog(`Automation rule triggered: ${update.ruleName}`);
                update.actions.forEach(action => {
                    sendMQTTMessage(`${action.key}`, action.value);
                });
            } else if (update.type === 'scheduledSettingApplied') {
                addToAutomationLog(`Scheduled setting applied: ${update.key} = ${update.value}`);
                sendMQTTMessage(`${update.key}`, update.value);
            }
        }

        // Initialize the page
        window.addEventListener('load', () => {
            loadUniversalSettings();
            loadInverterSettings();
            loadAutomationRules();
            loadScheduledSettings();

            // Set up a WebSocket connection to receive real-time updates
            const socket = new WebSocket(`ws://${window.location.host}`);
            socket.onmessage = (event) => {
                const data = JSON.parse(event.data);
                if (data.type === 'automationLog') {
                    addToAutomationLog(data.message);
                } else if (data.type === 'stateUpdate') {
                    updateSystemState(data.state);
                } else if (data.type === 'realtimeUpdate') {
                    handleRealtimeUpdate(data);
                }
            };
        });
    </script>
  </body>
</html>