<!DOCTYPE html>
<html lang="en">
<head>
    <base href="<%= ingress_path %>">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Carbonoz SolarAutopilot</title>
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">

    
     <link rel="stylesheet" href="<%= ingress_path %>/css/bootstrap.min.css">
    <link rel="stylesheet" href="<%= ingress_path %>/css/custom.css">
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    
    <!-- Google Material Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Material+Icons" rel="stylesheet">
    
    <!-- Internal Styles -->
    <style>
        .dashboard {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
            padding: 20px;
        }
        .chart-container {
            background-color: #fff;
            border-radius: 10px;
            padding: 20px;
        }
        #energy-distribution {
            grid-column: 2;
            grid-row: 1 / span 2;
        }
        h2 {
            margin-top: 0;
        }
    </style>
</head>
<body>

<div class="wrapper">
    <div class="body-overlay"></div>
    
    <!-- Sidebar -->
    <div id="sidebar">
        <div class="sidebar-header">
            <h3><img src="https://carbonoz.com/assets/images/image04.jpg?v=8b5d1d9b" class="img-fluid"/><span>Carbonoz</span></h3>
        </div>
        <ul class="list-unstyled component m-0">
            <li class="active">
                <a href="<%= ingress_path %>/" class="dashboard"><i class="material-icons">dashboard</i>Dashboard</a>
            </li>
            <li>
				<a href="<%= ingress_path %>/dashboard" class="charts"><i class="material-icons">battery_charging_full</i>Energy</a>
			</li>
            <li>
                <a href="<%= ingress_path %>/analytics" class="total-icon"><i class="material-icons">functions</i>Totals</a>
            </li>
            <li>
                <a href="<%= ingress_path %>/messages" class="message-icon"><i class="material-icons">message</i>Message</a>
            </li>
            <li>
                <a href="<%= ingress_path %>/charts" class="automation-icon"><i class="material-icons">bar_chart</i>Charts</a>
            </li>
            
            <li>
                <a href="<%= ingress_path %>/settings" class="config-icon"><i class="material-icons">settings</i>Settings</a>
            </li>
        </ul>
    </div>
    <!-- End Sidebar -->
    
    <!-- Page Content -->
    <div id="content">
        <!-- Top Navbar -->
        <div class="top-navbar">
            <div class="xd-topbar">
                <div class="row">
                    <div class="col-2 col-md-1 col-lg-1 order-2 order-md-1 align-self-center">
                        <div class="xp-menubar">
                            <span class="material-icons text-white">signal_cellular_alt</span>
                        </div>
                    </div>
                    <div class="col-md-5 col-lg-3 order-3 order-md-2">
                        <!-- Add any content as needed -->
                    </div>
                    <div class="col-10 col-md-6 col-lg-8 order-1 order-md-3">
                        <div class="xp-profilebar text-right">
                            <!-- Add any content as needed -->
                        </div>
                    </div>
                </div>
                <div class="xp-breadcrumbbar text-center">
                    <h4 class="page-title">Dashboard</h4>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="#">Carbonoz</a></li>
                        <li class="breadcrumb-item active" aria-current="page">SolarAutopilot</li>
                    </ol>
                </div>
            </div>
        </div>
        <!-- End Top Navbar -->
        
        <!-- Main Content -->
        <div class="main-content">
            <div class="row">
                <div class="col-md-12">
                    <div class="table-wrapper">
                        <div class="table-title">
                            <div class="row">
                                <div class="col-sm-6 p-0 flex justify-content-lg-start justify-content-center">
                                    <h2 class="ml-lg-2">Energy</h2>
                                </div>
                                <div class="col-sm-6 p-0 flex justify-content-lg-end justify-content-center">
                                    <!-- Add any content as needed -->
                                </div>
                            </div>
                        </div>
                        
                        <div class="dashboard">
                            <div class="chart-container">
                                <h2>Energy Usage</h2>
                                <canvas id="energy-usage-chart"></canvas>
                            </div>
                            <div class="chart-container" id="energy-distribution">
                                <h2>Energy Distribution</h2>
                                <div id="energy-flow-diagram"></div>
                            </div>
                            <div class="chart-container">
                                <h2>Solar Production</h2>
                                <canvas id="solar-production-chart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Main Content -->
        
        <!-- Footer -->
        <footer class="footer">
            <div class="container-fluid">
                <div class="footer-in">
                    <p class="mb-0">&copy; 2024 Carbonoz. All Rights Reserved.</p>
                </div>
            </div>
        </footer>
        <!-- End Footer -->
    </div>
    <!-- End Page Content -->
</div>

<!-- Optional JavaScript -->
<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
<script src="<%= ingress_path %>js/jquery-3.3.1.slim.min.js"></script>
<script src="<%= ingress_path %>js/popper.min.js"></script>
<script src="<%= ingress_path %>js/bootstrap.min.js"></script>
<script src="<%= ingress_path %>js/jquery-3.3.1.min.js"></script>

<!-- D3 and Chart.js -->
<script src="https://d3js.org/d3.v7.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Custom Scripts -->
<script>
    $(document).ready(function(){
        $(".xp-menubar").on('click', function(){
            $("#sidebar").toggleClass('active');
            $("#content").toggleClass('active');
            $(".body-overlay").toggleClass('show-nav');
        });
    });

    async function fetchTodayEnergyData() {
        try {
            const response = await fetch('<%= ingress_path %>/api/energy');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return await response.json();
        } catch (error) {
            console.error('Error fetching data:', error);
            return null;
        }
    }

    function updateEnergyDistributionDiagram(data) {
        d3.select("#energy-flow-diagram").html("");
        const width = 400;
        const height = 300;
        const svg = d3.select("#energy-flow-diagram")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        const nodes = [
            { id: "solar", label: "Solar", value: data.solarProduction, icon: "☀️" },
            { id: "grid", label: "Grid", value: data.gridIn - data.gridOut, icon: "🏭" },
            { id: "battery", label: "Battery", value: data.batteryDischarged - data.batteryCharged, icon: "🔋" },
            { id: "home", label: "Home", value: data.totalConsumption, icon: "🏠" }
        ];

        const links = [
            { source: "solar", target: "home", value: Math.min(data.solarProduction, data.totalConsumption) },
            { source: "grid", target: "home", value: Math.max(0, data.gridIn - data.gridOut) },
            { source: "battery", target: "home", value: Math.max(0, data.batteryDischarged - data.batteryCharged) },
            { source: "solar", target: "battery", value: Math.max(0, data.solarProduction - data.totalConsumption) },
            { source: "solar", target: "grid", value: Math.max(0, data.solarProduction - data.totalConsumption - (data.batteryCharged - data.batteryDischarged)) }
        ];

        const nodeElements = svg.selectAll(".node")
            .data(nodes)
            .enter().append("g")
            .attr("class", "node")
            .attr("transform", (d, i) => `translate(${100 + (i % 2) * 200}, ${50 + Math.floor(i / 2) * 200})`);

        nodeElements.append("circle")
            .attr("r", 40)
            .attr("fill", "transparent")
            .attr("stroke", d => d.id === "solar" ? "#FFA500" : 
                                 d.id === "grid" ? "#4CAF50" : 
                                 d.id === "battery" ? "#2196F3" : "#FF5722")
            .attr("stroke-width", 3);

        nodeElements.append("text")
            .attr("text-anchor", "middle")
            .attr("dy", "-1em")
            .text(d => d.icon);

        nodeElements.append("text")
            .attr("text-anchor", "middle")
            .attr("dy", "2em")
            .text(d => `${d.label}: ${Math.abs(d.value).toFixed(1)} kWh`);

        const linkElements = svg.selectAll(".link")
            .data(links)
            .enter().append("path")
            .attr("class", "link")
            .attr("d", d => {
                const sourceNode = nodes.find(n => n.id === d.source);
                const targetNode = nodes.find(n => n.id === d.target);
                const sourceX = 100 + (nodes.indexOf(sourceNode) % 2) * 200;
                const sourceY = 50 + Math.floor(nodes.indexOf(sourceNode) / 2) * 200;
                const targetX = 100 + (nodes.indexOf(targetNode) % 2) * 200;
                const targetY = 50 + Math.floor(nodes.indexOf(targetNode) / 2) * 200;
                return `M${sourceX},${sourceY} L${targetX},${targetY}`;
            })
            .attr("stroke", d => d.source === "solar" ? "#FFA500" : 
                                  d.source === "grid" ? "#4CAF50" : 
                                  d.source === "battery" ? "#2196F3" : "#FF5722")
            .attr("stroke-width", d => Math.max(1, d.value / 5))
            .attr("fill", "none");

        svg.append("defs").selectAll("marker")
            .data(["end"])
            .enter().append("marker")
            .attr("id", String)
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 15)
            .attr("refY", -1.5)
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .attr("orient", "auto")
            .append("path")
            .attr("d", "M0,-5L10,0L0,5")
            .attr("fill", "#ffffff");

        linkElements.attr("marker-end", "url(#end)");
    }

    function updateEnergyUsageChart(data) {
        const ctx = document.getElementById('energy-usage-chart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: data.hourlyData.map(d => d.hour),
                datasets: [
                    {
                        label: 'Solar',
                        data: data.hourlyData.map(d => d.solar),
                        backgroundColor: '#FFA500'
                    },
                    {
                        label: 'Grid',
                        data: data.hourlyData.map(d => d.grid),
                        backgroundColor: '#4CAF50'
                    },
                    {
                        label: 'Battery',
                        data: data.hourlyData.map(d => d.battery),
                        backgroundColor: '#2196F3'
                    },
                    {
                        label: 'Load',
                        data: data.hourlyData.map(d => d.load),
                        backgroundColor: '#FF5722'
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: { stacked: true },
                    y: { 
                        stacked: true,
                        title: { display: true, text: 'kWh' }
                    }
                },
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Energy Usage' }
                }
            }
        });
    }

    function updateSolarProductionChart(data) {
        const ctx = document.getElementById('solar-production-chart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: data.hourlyData.map(d => d.hour),
                datasets: [{
                    label: 'Solar Production',
                    data: data.hourlyData.map(d => d.solar),
                    backgroundColor: '#FFA500'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: { 
                        beginAtZero: true,
                        title: { display: true, text: 'kWh' }
                    }
                },
                plugins: {
                    legend: { display: false },
                    title: { display: true, text: 'Solar Production' }
                }
            }
        });
    }

    async function updateDashboard() {
        const data = await fetchTodayEnergyData();
        if (data) {
            updateEnergyUsageChart(data);
            updateSolarProductionChart(data);
            updateEnergyDistributionDiagram(data);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        updateDashboard();
        setInterval(updateDashboard, 300000); // Update every 5 minutes
    });
</script>

</body>
</html>
