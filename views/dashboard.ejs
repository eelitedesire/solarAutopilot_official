<!DOCTYPE html>
<html>
  <head> 
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Solar Autopilot </title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="all,follow">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="vendor/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="vendor/font-awesome/css/font-awesome.min.css">
    <!-- Custom Font Icons CSS-->
    <link rel="stylesheet" href="css/font.css">
    <!-- Google fonts - Muli-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Muli:300,400,700">
    <!-- theme stylesheet-->
    <link rel="stylesheet" href="css/style.default.css" id="theme-stylesheet">
    <!-- Custom stylesheet - for your changes-->
    <link rel="stylesheet" href="css/custom.css">
    <!-- Favicon-->
    <link rel="shortcut icon" href="https://carbonoz.com/assets/images/image04.jpg?v=8b5d1d9b">
    <!-- Tweaks for older IEs--><!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
  </head>
  <body>
    <header class="header">   
      <nav class="navbar navbar-expand-lg">
        <div class="search-panel">
          <div class="search-inner d-flex align-items-center justify-content-center">
            <div class="close-btn">Close <i class="fa fa-close"></i></div>
            <form id="searchForm" action="#">
              <div class="form-group">
                <input type="search" name="search" placeholder="What are you searching for...">
                <button type="submit" class="submit">Search</button>
              </div>
            </form>
          </div>
        </div>
        <div class="container-fluid d-flex align-items-center justify-content-between">
          <div class="navbar-header">
            <!-- Navbar Header--><a href="<%= ingress_path %>/" class="navbar-brand">
              <div class="brand-text brand-big visible text-uppercase"><img src="https://carbonoz.com/assets/images/image04.jpg?v=8b5d1d9b" alt="" width="40px"style="margin-right: 10px;"><strong class="text-primary">Solar</strong><strong>Autopilot</strong></div>
              <div class="brand-text brand-sm"><img src="https://carbonoz.com/assets/images/image04.jpg?v=8b5d1d9b" alt="" width="40px"style="margin-right: 10px;"><strong class="text-primary">S</strong><strong>A</strong></div></a>
            <!-- Sidebar Toggle Btn-->
            <button class="sidebar-toggle"><i class="fa fa-long-arrow-left"></i></button>
          </div>
        </div>
      </nav>
    </header>
    <div class="d-flex align-items-stretch">
      <!-- Sidebar Navigation-->
      <nav id="sidebar">
        <!-- Sidebar Header-->
        <div class="sidebar-header d-flex align-items-center">
        </div>
        <!-- Sidebar Navidation Menus--><span class="heading">Main</span>
        <ul class="list-unstyled">
          <li class="active"><a href="<%= ingress_path %>/"><i class="fa fa-home"></i> Home</a></li>
          <li><a href="<%= ingress_path %>/dashboard"><i class="fa fa-bolt"></i> Energy</a></li>
          <li><a href="<%= ingress_path %>/analytics"><i class="fa fa-calculator"></i> Totals</a></li>
          <li><a href="<%= ingress_path %>/messages"><i class="fa fa-envelope"></i> Messages</a></li>
          <li><a href="<%= ingress_path %>/settings"><i class="fa fa-cog"></i> Settings</a></li>
          <li><a href="charts.html"> <i class="fa fa-bar-chart"></i>Charts </a></li>
        </ul>
      </nav>
      <!-- Sidebar Navigation end-->
      <div class="page-content">
        <div class="page-header">
          <div class="container-fluid">
            <h2 class="h5 no-margin-bottom">Energy</h2>
          </div>
        </div>
        <section>
          <div class="dashboard">
            <div class="chart-container">
                <h2>Energy Usage</h2>
                <canvas id="energy-usage-chart"></canvas>
            </div>
            <div class="chart-container" id="energy-distribution">
                <h2>Energy Distribution</h2>
                <div id="energy-flow-diagram"></div>
            </div>
            <div class="chart-container">
                <h2>Solar Production</h2>
                <canvas id="solar-production-chart"></canvas>
            </div>
          </div>
        </section>
        <footer class="footer">
          <div class="footer__block block no-margin-bottom">
            <div class="container-fluid text-center">
              <p class="no-margin-bottom">2024 &copy; Carbonoz</p>
            </div>
          </div>
        </footer>
      </div>
    </div>
    <!-- JavaScript files-->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/popper.js/umd/popper.min.js"> </script>
    <script src="vendor/bootstrap/js/bootstrap.min.js"></script>
    <script src="vendor/jquery.cookie/jquery.cookie.js"> </script>
    <script src="vendor/chart.js/Chart.min.js"></script>
    <script src="vendor/jquery-validation/jquery.validate.min.js"></script>
    <script src="js/charts-home.js"></script>
    <script src="js/front.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>

    <script>
    async function fetchTodayEnergyData() {
        try {
            const response = await fetch('<%= ingress_path %>/api/energy');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return await response.json();
        } catch (error) {
            console.error('Error fetching data:', error);
            return null;
        }
    }

    function getLastTwentyFourHours() {
        const hours = [];
        const now = new Date();
        for (let i = 23; i >= 0; i--) {
            let d = new Date(now);
            d.setHours(d.getHours() - i);
            hours.push(d.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true }));
        }
        return hours;
    }

    function updateEnergyDistributionDiagram(data) {
        d3.select("#energy-flow-diagram").html("");
        const width = 400;
        const height = 300;
        const svg = d3.select("#energy-flow-diagram")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        const nodes = [
            { id: "solar", label: "Solar", value: data.solarProduction, icon: "☀️" },
            { id: "grid", label: "Grid", value: data.gridIn - data.gridOut, icon: "🏭" },
            { id: "battery", label: "Battery", value: data.batteryDischarged - data.batteryCharged, icon: "🔋" },
            { id: "home", label: "Home", value: data.totalConsumption, icon: "🏠" }
        ];

        const links = [
            { source: "solar", target: "home", value: Math.min(data.solarProduction, data.totalConsumption) },
            { source: "grid", target: "home", value: Math.max(0, data.gridIn - data.gridOut) },
            { source: "battery", target: "home", value: Math.max(0, data.batteryDischarged - data.batteryCharged) },
            { source: "solar", target: "battery", value: Math.max(0, data.solarProduction - data.totalConsumption) },
            { source: "solar", target: "grid", value: Math.max(0, data.solarProduction - data.totalConsumption - (data.batteryCharged - data.batteryDischarged)) }
        ];

        const nodeElements = svg.selectAll(".node")
            .data(nodes)
            .enter().append("g")
            .attr("class", "node")
            .attr("transform", (d, i) => `translate(${100 + (i % 2) * 200}, ${50 + Math.floor(i / 2) * 200})`);

        nodeElements.append("circle")
            .attr("r", 40)
            .attr("fill", "transparent")
            .attr("stroke", d => d.id === "solar" ? "#FFA500" : 
                                 d.id === "grid" ? "#4CAF50" : 
                                 d.id === "battery" ? "#2196F3" : "#FF5722")
            .attr("stroke-width", 3);

        nodeElements.append("text")
            .attr("text-anchor", "middle")
            .attr("dy", "-1em")
            .text(d => d.icon);

        nodeElements.append("text")
            .attr("text-anchor", "middle")
            .attr("dy", "2em")
            .text(d => `${d.label}: ${Math.abs(d.value).toFixed(1)} kWh`);

        const linkElements = svg.selectAll(".link")
            .data(links)
            .enter().append("path")
            .attr("class", "link")
            .attr("d", d => {
                const sourceNode = nodes.find(n => n.id === d.source);
                const targetNode = nodes.find(n => n.id === d.target);
                const sourceX = 100 + (nodes.indexOf(sourceNode) % 2) * 200;
                const sourceY = 50 + Math.floor(nodes.indexOf(sourceNode) / 2) * 200;
                const targetX = 100 + (nodes.indexOf(targetNode) % 2) * 200;
                const targetY = 50 + Math.floor(nodes.indexOf(targetNode) / 2) * 200;
                return `M${sourceX},${sourceY} L${targetX},${targetY}`;
            })
            .attr("stroke", d => d.source === "solar" ? "#FFA500" : 
                                  d.source === "grid" ? "#4CAF50" : 
                                  d.source === "battery" ? "#2196F3" : "#FF5722")
            .attr("stroke-width", d => Math.max(1, d.value / 5))
            .attr("fill", "none");

        svg.append("defs").selectAll("marker")
            .data(["end"])
            .enter().append("marker")
            .attr("id", String)
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 15)
            .attr("refY", -1.5)
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .attr("orient", "auto")
            .append("path")
            .attr("d", "M0,-5L10,0L0,5")
            .attr("fill", "#ffffff");

        linkElements.attr("marker-end", "url(#end)");
    }

    function updateEnergyUsageChart(data) {
        const ctx = document.getElementById('energy-usage-chart').getContext('2d');
        const hours = getLastTwentyFourHours();
        
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: hours,
                datasets: [
                    {
                        label: 'Solar',
                        data: data.hourlyData.map(d => d.solar),
                        backgroundColor: '#FFA500'
                    },
                    {
                        label: 'Grid',
                        data: data.hourlyData.map(d => d.grid),
                        backgroundColor: '#4CAF50'
                    },
                    {
                        label: 'Battery',
                        data: data.hourlyData.map(d => d.battery),
                        backgroundColor: '#2196F3'
                    },
                    {
                        label: 'Load',
                        data: data.hourlyData.map(d => d.load),
                        backgroundColor: '#FF5722'
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: { 
                        stacked: true,
                        ticks: {
                            maxRotation: 45,
                            minRotation: 45
                        }
                    },
                    y: { 
                        stacked: true,
                        title: { display: true, text: 'kWh' }
                    }
                },
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Energy Usage (Last 24 Hours)' }
                }
            }
        });
    }

    function updateSolarProductionChart(data) {
        const ctx = document.getElementById('solar-production-chart').getContext('2d');
        const hours = getLastTwentyFourHours();

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: hours,
                datasets: [{
                    label: 'Solar Production',
                    data: data.hourlyData.map(d => d.solar),
                    backgroundColor: '#FFA500'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        ticks: {
                            maxRotation: 45,
                            minRotation: 45
                        }
                    },
                    y: { 
                        beginAtZero: true,
                        title: { display: true, text: 'kWh' }
                    }
                },
                plugins: {
                    legend: { display: false },
                    title: { display: true, text: 'Solar Production (Last 24 Hours)' }
                }
            }
        });
    }

    async function updateDashboard() {
        const data = await fetchTodayEnergyData();
        if (data) {
            updateEnergyUsageChart(data);
            updateSolarProductionChart(data);
            updateEnergyDistributionDiagram(data);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        updateDashboard();
        setInterval(updateDashboard, 300000); // Update every 5 minutes
    });
    </script>
  </body>
</html>